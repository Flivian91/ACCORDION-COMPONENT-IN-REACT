export const questions = [
  {
    id: 1,
    question: "What is JSX in React?",
    answer: "JSX is a syntax extension for JavaScript that looks similar to XML or HTML. It is used with React to describe what the UI should look like. Each JSX element is just syntactic sugar for calling React.createElement.",
    seen: false,
    bookmark: false,
  },
  {
    id: 2,
    question: "What is a component in React?",
    answer: "A component in React is a reusable piece of the UI. Components can be functional or class-based, and they allow you to split the UI into independent, reusable pieces that can be managed separately.",
    seen: false,
    bookmark: false,
  },
  {
    id: 3,
    question: "What is the difference between state and props?",
    answer: "State is a local data storage that is local to the component and cannot be passed to other components, whereas props are used to pass data from one component to another. Props are immutable and state is mutable.",
    seen: false,
    bookmark: false,
  },
  {
    id: 4,
    question: "What is the purpose of useState hook?",
    answer: "The useState hook is a special function that lets you add React state to functional components. It returns an array with two values: the current state and a function to update it.",
    seen: false,
    bookmark: false,
  },
  {
    id: 5,
    question: "What is the Virtual DOM?",
    answer: "The Virtual DOM is a concept where a virtual representation of the UI is kept in memory and synced with the real DOM using libraries such as ReactDOM. This process is called reconciliation.",
    seen: false,
    bookmark: false,
  },
  {
    id: 6,
    question: "What is the purpose of useEffect hook?",
    answer: "The useEffect hook allows you to perform side effects in function components. It is similar to lifecycle methods in class components like componentDidMount, componentDidUpdate, and componentWillUnmount.",
    seen: false,
    bookmark: false,
  },
  {
    id: 7,
    question: "What are React hooks?",
    answer: "React hooks are functions that let you use state and other React features in functional components. Examples include useState, useEffect, useContext, and useReducer.",
    seen: false,
    bookmark: false,
  },
  {
    id: 8,
    question: "How does lifting state up work in React?",
    answer: "Lifting state up is a pattern where you move state from child components to their common parent component. This allows the parent component to manage the state and pass it down to the children via props, ensuring consistency.",
    seen: false,
    bookmark: false,
  },
  {
    id: 9,
    question: "What is Context API?",
    answer: "The Context API is a React structure that allows you to share data across all levels of the application without passing props down manually at every level. It is useful for global state management.",
    seen: false,
    bookmark: false,
  },
  {
    id: 10,
    question: "What is the difference between functional and class components?",
    answer: "Functional components are simple functions that return JSX and do not have lifecycle methods or state by default (until hooks). Class components are ES6 classes that extend React.Component and can have state and lifecycle methods.",
    seen: false,
    bookmark: false,
  },
];
